Kartikeya Sharma
February 5, 2019 @ 1 PM
lab 04 - notes.txt
notes: This text file contains
       responses to questions
       involving taking notes
       on particular C
       commands via reading
       their respective manual
       pages.

Exercise 2

creat() creates file if that said file does not exist at the given pathname.
If the file already exists at that pathname, the file will be truncated 
and can only be written to. The command ultimately returns a file 
descriptor, which is lowest-available nonnegative integer referring to 
a specific file. Such unique numbers are assigned to files that are open 
for the currently running process. 

open() opens a file at the given pathname. The command ultimately returns
the lowest-available nonnegative integer referring to a specific file. 
Such unique numbers are assigned to files that are open for the 
currently running process.

read() reads bytes of data from the file represented by the inputted
file descriptor and stores them in memory starting at the inputted
buf. It returns the number of bytes that have been read; if an
error occurs whilst reading the file, -1 is returned.

write() writes bytes of data from memory starting at the inputted buf 
to the file represented by the inputted file descriptor. It returns
the number of bytes that have been written; if an error occurs
whilst writing the file, -1 is returned.

close() closes the file represented by the inputted file descriptor. After
a file has been closed, the file descriptor no longer refers to a
particular file and, hence, is avaiable to be used to refer to another
file. It returns 0 on successful closure of the file; if an error
occurs whilst closing the file, -1 is returned.



Exercise 4

fopen() opens a file at an inputted pathname with a particular mode, such
as reading, writing, truncating, and/or appending. It also associates
a stream with the file. It returns a FILE pointer; if the file is not 
successfully opened, though, it returns NULL.

fgets() reads in characters from a stream and adds them to the inputted
buffer s; the amount of characters read in is no more than one less than
the inputted integer size. fgets() stops reading from the stream
once it has reached the end of a file or a new line. A newline is stored
into the buffer if read, and '\0' (a terminating null byte) is added to
the buffer after the last character in the buffer. It returns the buffer
s on success; if no characters are read into the buffer or an error
occurs while reading characters into the buffer, NULL is returned.

fprintf() writes characters from inputted strings to the inputted 
output stream, formatting them using the inputted formatting string
format. It returns the number of characters printed (exclusive of the
terminating null byte); if an error is encountered, it returns
a negative value.

fseek() sets the file position indicator for the stream stream; the file
position indicator indicates where in a file a stream is currently
reading from or writing to. The position is set based on adding
the inputted offset to the position represented by the inputted 
whence. It returns 0 upon successful setting of the file position
indicator; if an error occurs during this process, -1 is returned.

fclose() writes any buffered output data to the stream pointed by
fp and closes the underlying file descriptor, i.e. the file descriptor
is now available to be used by the system to represent access to another
file. It returns 0 upon successful execution; if an error occurs, EOF
is returned.



Exercise 5

1: Hello
 --> Hello
2: world,
 --> world
3: how
 --> how
4: are
 --> are
5: you?
 --> you
