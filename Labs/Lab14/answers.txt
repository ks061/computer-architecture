Name: Kartikeya Sharma
Section: 1 PM

Please see 2.1.pdf, 2.2.pdf, 2.3.pdf, 2.4.pdf, 2.5.pdf, and 3.pdf to 
see the data and graphs related to my analyses for each of these questions.
Thank you in advance.

2.1: Increasing block size increases conflict misses because once it becomes
     a significant portion of the cache size, there will be more blocks
     competing for the same space. The data agrees with this assertion;
     increasing the block size from 8 bytes to 64 bytes increased the 
     conflict misses from 17,499 to 20,659.  Also, the compulsory misses 
     decreased from 19,486 to 3,306 when the block size was increased from
     8 bytes to 64 bytes because spacial locality preloaded the data near
     past memory references. 

2.2: Doubling the size of the cache (from 8K to 16K) increases the number
     of indices where blocks can be stored, and therefore reduces the capacity
     misses. This can be seen by the decrease in capacity misses from 32,088
     to 13,339.

2.3: Compulsory misses are not replaced by conflict misses (we can see this because
     the amount of compulsory misses stays constant at 6,216 from cache size 32 KB
     until cache size 512 KB) because the total capacity of the cache is much larger
     than the amount of data being stored in the cache. Because the cache size increases,
     capacity misses decrease from 933 to 0 because there are more indices where
     blocks can be stored. Also, conflict misses decrease because there is less competition
     for cache space among blocks now as the cache size increases; conflict misses
     decreased from 1,239 to 64 when cache size increased from 32 KB to 512 KB.

2.4: There are slightly more capacity misses that occur when increasing
     the associativity from 1, 2, then 4, i.e. from 32088, 32338, and then
     32742. The number of conflict misses significantly increases from 17499,
     25991, and then 45140. There is much data competing for storage in
     a relatively small cache, i.e. only of size 8 KB.

2.5: Compulsory misses are not replaced by conflict misses (we can see this because
     the amount of compulsory misses stays consistent at 19,486 from associativity
     1, 2, and then 4) because the total capacity of the cache is much larger than the
     amount of data being stored in the cache; the 8 KB cache in 2.4 simply did not have
     enough space to store data in the cache hence why there were more misses. Capacity
     misses were significantly lower also because the total capacity of the cache is much
     larger than the amount of data trying to be stored in the cache. Finally, the number of
     conflict misses was substantially lowered with increased associativity (and block size
     relative to 2.4) because associativity increases the number of possible places that data
     can be stored if a potential conflict arises.  

3:   First, the naive results were examined, and a result that had a relatively low amount of
     misses was chosen. For the purposes of making the benchmark-blocked program achieve a
     cache performance level similar to the naive program using a smaller cache, the following
     result was chosen from the naive analysis due to its low overall demand misses:
     
     Block Size: 32 bytes
     Associativity Set Size: 1
     Cache Size: 128 KB
     Demand Misses: 6950
       Compulsory Misses: 6216
       Capacity Misses: 22
       Conflict Misses: 712

     Because the lab asks to choose a smaller cache size (than 128 KB in this case) to improve
     the cache performance of the benchmark-blocked program, 32 KB was chosen as the cache size.
     To provide additional justification, when 16 KB or 8 KB were chosen (keeping block size
     at 64 bytes and associativity set size at 4), demand misses significantly increased from
     4483 (32 KB cache size), to 12128 (16 KB cache size), and to 37651 (8 KB cache size). Choosing
     too small of a cache results in increased capacity misses and conflict misses because there
     is much data that is trying to be stored in the cache competing for less space. 

     Now that the cache size is fixed to 32 KB, one can begin varying the block size and associativity
     set size. Let us look at the data for fixed associativity set size of 1. As the block size
     is increased in size from 8 bytes, to 16 bytes, to 32 bytes, and then 64 bytes, the demand
     misses decrease from 23,943, to 15,147, to 8,946, and then to 5,865. By increasing the block
     size, compulsory misses, for one, are reduced by using spacial locality to preload data near
     past memory references. The conflict misses decrease because there are less units being stored
     (but more stored in each unit with the increased block size), so there will naturally be less
     possible conflicts when storing each block. The capacity misses also decrease.

     Now, let us look at the data (still for fixed cache size of 32 KB) for fixed block size of 
     64 bytes. The demand misses decrease from 5865 (associativity set size of 1), to 4917
     (associativity set size of 2), and to 4483 (associativity set size of 4). The primary reason
     for this is that the conflict misses decrease from 1653 (associativity set size of 1), to 
     671 (associativity set size of 2), and then to 239 (associativity set size of 4). The
     decrease in the conflict misses, in turn, is due to the increases in the number of possible
     places that data can be stored if a potential conflict arises within each set in the
     associative cache arrangement.

     The following optimized result of the benchmark program was better than the cache performance
     of the naive program:

     Block Size: 64 bytes
     Associativity Set Size: 4
     Cache Size: 32 KB
     Demand Misses: 4483
       Compulsory Misses: 3305
       Capacity Misses: 939
       Conflict Misses: 239

     Hence, the benchmark program has successfully been optimized near the cache performance of the
     naive program by keeping a low enough cache size of 32 KB while increasing the block size
     from 32 bytes to 64 bytes and increasing the associativity set size from 1 to 4.
